pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        GITHUB_USERNAME = credentials('GITHUB_USERNAME')
        IMAGE_TAG       = "${env.BUILD_NUMBER}"
    }

    stage('Check files (for debug)') {
    			steps {
    				sh """
    				pwd
    				ls -lh ./
    				"""
    			}
    		}

    stages {
        stage('Build and execute tests') {
            steps {
                script {
                    def microservices = [
                        'account-service',
                        'block-service',
                        'cash-service',
                        'front',
                        'exchange-service',
                        'exchange-generator',
                        'notification-service',
                        'transfer-service'
                    ]

                    echo "Текущая директория: ${pwd()}"
                    sh 'ls -la'

                    microservices.each { service ->
                        echo "Текущая директория: ${pwd()}"
                        sh 'ls -la'
                        echo "Building and testing ${service}"
                        dir("${service}") {
                            sh 'mvn clean test'
                        }
                    }
                }
            }
        }

        stage('Build JARs') {
            steps {
                script {
                    [
                        'account-service',
                        'block-service',
                        'cash-service',
                        'front',
                        'exchange-service',
                        'exchange-generator',
                        'notification-service',
                        'transfer-service'
                    ].each { service ->
                        echo "Building JAR for ${service}"
                        dir("${service}") {
                            sh 'mvn clean package'
                        }
                    }
                }
            }
        }

        stage('Build Docker images') {
            steps {
                script {
                    [
                        'account-service',
                         'block-service',
                         'cash-service',
                         'front',
                         'exchange-service',
                         'exchange-generator',
                         'notification-service',
                         'transfer-service'
                    ].each { service ->
                        echo "Building Docker image for ${service}"
                        sh "docker build -t ${DOCKER_REGISTRY}/${service}:${IMAGE_TAG} ./${service}"
                    }
                }
            }
        }

        stage('Push Docker images') {
            steps {
                withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
                    sh """
                    echo \$GHCR_TOKEN | docker login ghcr.io -u ${GITHUB_USERNAME} --password-stdin
                    """

                    script {
                        [
                            'account-service',
                            'block-service',
                            'cash-service',
                            'front',
                            'exchange-service',
                            'exchange-generator',
                            'notification-service',
                            'transfer-service'
                        ].each { service ->
                            echo "Pushing Docker image for ${service}"
                            sh "docker push ${DOCKER_REGISTRY}/${service}:${IMAGE_TAG}"
                        }
                    }
                }
            }
        }

        stage('Deploy to TEST') {
            steps {
                dir('mybank') {
                    script {
                        def servicesToRename = [
                            'account-service',
                            'block-service',
                            'cash-service',
                            'front',
                            'exchange-service',
                            'exchange-generator',
                            'notification-service',
                            'transfer-service'
                        ]

                        servicesToRename.each { service ->
                            sh """
                            helm upgrade --install ${service} . \\
                              --namespace test --create-namespace \\
                              --set ${service}.image.repository=${DOCKER_REGISTRY}/${service} \\
                              --set ${service}.image.tag=${IMAGE_TAG}
                            """
                        }

                        sh """
                        helm dependency update .
                        helm upgrade --install mybank . \\
                          --namespace test --create-namespace
                        """
                    }
                }
            }
        }

        stage('Manual approval for PROD') {
            steps {
                input message: 'Confirm manually to deploy to PROD environment.', ok: 'Confirm'
            }
        }

        stage('Deploy to PROD') {
            steps {
                dir('mybank') {
                    sh """
                    helm dependency update .
                    helm upgrade --install mybank . \\
                      --namespace prod --create-namespace
                    """
                }
            }
        }


    }


    post {
        always {
            echo 'Pipeline completed - cleaning up'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }



}