pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        GITHUB_USERNAME = credentials('GITHUB_USERNAME')
        IMAGE_TAG       = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Build project') {
                            steps {
                            //deleteDir()
                                script {
                                        sh 'mvn clean install -Dmaven.test.skip=true'
                                }
                            }
                        }

                stage('Execute tests') {
                    steps {
                        script {
                            def microservices = [
                                'account-service',
                                'block-service',
                                'cash-service',
                                'front',
                                'exchange-service',
                                'exchange-generator',
                                'notification-service',
                                'transfer-service'
                            ]

                            echo "Текущая директория: ${pwd()}"
                            sh 'ls -la'

                            microservices.each { service ->
                                echo "Текущая директория: ${pwd()}"
                                sh 'ls -la'
                                echo "Building and testing ${service}"
                                dir("${service}") {
                                    sh 'mvn test'
                                }
                            }
                        }
                    }
                }

                 /* stage('Build JARs') {
                    steps {
                        script {
                            [
                                'account-service',
                                'block-service',
                                'cash-service',
                                'front',
                                'exchange-service',
                                'exchange-generator',
                                'notification-service',
                                'transfer-service'
                            ].each { service ->
                                echo "Building JAR for ${service}"
                                dir("${service}") {
                                    sh 'mvn clean package'
                                }
                            }
                        }
                    }
                } */

        stage('Build Docker Images') {
            steps {
                sh """
                docker build -t ${DOCKER_REGISTRY}/account-service:${IMAGE_TAG} ./account-service
                docker build -t ${DOCKER_REGISTRY}/block-service:${IMAGE_TAG} ./block-service
                docker build -t ${DOCKER_REGISTRY}/cash-service:${IMAGE_TAG} ./cash-service
                docker build -t ${DOCKER_REGISTRY}/front:${IMAGE_TAG} ./front
                docker build -t ${DOCKER_REGISTRY}/exchange-service:${IMAGE_TAG} ./exchange-service
                docker build -t ${DOCKER_REGISTRY}/exchange-generator:${IMAGE_TAG} ./exchange-generator
                docker build -t ${DOCKER_REGISTRY}/notification-service:${IMAGE_TAG} ./notification-service
                docker build -t ${DOCKER_REGISTRY}/transfer-service:${IMAGE_TAG} ./transfer-service
                """
            }
        }

        stage('Push Docker Images') {
            steps {
                withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
                    sh """
                    echo \$GHCR_TOKEN | docker login ghcr.io -u ${GITHUB_USERNAME} --password-stdin

                    docker push ${DOCKER_REGISTRY}/account-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/block-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/cash-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/front:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/exchange-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/exchange-generator:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/notification-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/transfer-service:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Deploy to TEST using Helm') {
            steps {
                dir("deployment") {
                  sh """
                  helm dependency update .
                  helm upgrade --install mybank ./ \\
                    --namespace test --create-namespace \\
                    --set account-service.image.repository=${DOCKER_REGISTRY}/account-service \\
                    --set account-service.image.tag=${IMAGE_TAG} \\
                    --set block-service.image.repository=${DOCKER_REGISTRY}/block-service \\
                    --set block-service.image.tag=${IMAGE_TAG} \\
                    --set cash-service.image.repository=${DOCKER_REGISTRY}/cash-service \\
                    --set cash-service.image.tag=${IMAGE_TAG} \\
                    --set front.image.repository=${DOCKER_REGISTRY}/front \\
                    --set front.image.tag=${IMAGE_TAG} \\
                    --set front.ingress.hosts[0].host=bank-mybank.test \\
                    --set front.ingress.hosts[0].paths[0].path="/" \\
                    --set front.ingress.hosts[0].paths[0].pathType="Prefix" \\
                    --set exchange-service.image.repository=${DOCKER_REGISTRY}/exchange-service \\
                    --set exchange-service.image.tag=${IMAGE_TAG} \\
                    --set exchange-generator.image.repository=${DOCKER_REGISTRY}/exchange-generator \\
                    --set exchange-generator.image.tag=${IMAGE_TAG} \\
                    --set notification-service.image.repository=${DOCKER_REGISTRY}/notification-service \\
                    --set notification-service.image.tag=${IMAGE_TAG} \\
                    --set transfer-service.image.repository=${DOCKER_REGISTRY}/transfer-service \\
                    --set transfer-service.image.tag=${IMAGE_TAG} \\
                  """
               }

            }
        }

        stage('Manual Approval for PROD') {
            steps {
                input message: 'Deploy to PROD environment?', ok: 'Yes, deploy'
            }
        }

        stage('Deploy to PROD using Helm') {
            steps {
            dir("deployment") {
                sh """
                helm dependency update .
                helm upgrade --install mybank ./ \\
                  --namespace prod --create-namespace \\
                  --set account-service.image.repository=${DOCKER_REGISTRY}/account-service \\
                  --set account-service.image.tag=${IMAGE_TAG} \\
                  --set block-service.image.repository=${DOCKER_REGISTRY}/block-service \\
                  --set block-service.image.tag=${IMAGE_TAG} \\
                  --set cash-service.image.repository=${DOCKER_REGISTRY}/cash-service \\
                  --set cash-service.image.tag=${IMAGE_TAG} \\
                  --set front.image.repository=${DOCKER_REGISTRY}/front \\
                  --set front.image.tag=${IMAGE_TAG} \\
                  --set front.ingress.hosts[0].host=bank-mybank.prod \\
                  --set front.ingress.hosts[0].paths[0].path="/" \\
                  --set front.ingress.hosts[0].paths[0].pathType="Prefix" \\
                  --set exchange-service.image.repository=${DOCKER_REGISTRY}/exchange-service \\
                  --set exchange-service.image.tag=${IMAGE_TAG} \\
                  --set exchange-generator.image.repository=${DOCKER_REGISTRY}/exchange-generator \\
                  --set exchange-generator.image.tag=${IMAGE_TAG} \\
                  --set notification-service.image.repository=${DOCKER_REGISTRY}/notification-service \\
                  --set notification-service.image.tag=${IMAGE_TAG} \\
                  --set transfer-service.image.repository=${DOCKER_REGISTRY}/transfer-service \\
                  --set transfer-service.image.tag=${IMAGE_TAG} \\
                """
            }
            }
        }
    }
}