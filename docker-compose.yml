version: '3.8'

services:
  front:
    build:
      context: ./front
      dockerfile: Dockerfile
    ports:
      - "${FRONT_SERVER_PORT}:${FRONT_SERVER_PORT}"
    environment:
      - FRONT_SERVER_PORT=${FRONT_SERVER_PORT}
      - CONFIG_SERVER_NAME=${CONFIG_SERVER_NAME}
      - CONFIG_SERVER_PORT=${CONFIG_SERVER_PORT}
      - CONSUL_HOST_NAME=${CONSUL_HOST_NAME}
      - KEYCLOAK_HOST_NAME=${KEYCLOAK_HOST_NAME}
    entrypoint: >
      sh -c "
        until curl -f http://keycloak:9092/realms/master; do
          echo 'Waiting for Keycloak to start...';
          sleep 5;
        done &&
        exec java -jar front.jar
      "
    depends_on:
      config-server:
        condition: service_healthy

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "${GATEWAY_SERVER_PORT}:${GATEWAY_SERVER_PORT}"
    environment:
      - GATEWAY_SERVER_PORT=${GATEWAY_SERVER_PORT}
      - CONSUL_HOST_NAME=${CONSUL_HOST_NAME}
      - CONFIG_SERVER_NAME=${CONFIG_SERVER_NAME}
      - CONFIG_SERVER_PORT=${CONFIG_SERVER_PORT}
    depends_on:
      config-server:
        condition: service_healthy

  account-service:
    build:
      context: ./account-service
      dockerfile: Dockerfile
    ports:
      - "${ACCOUNT_SERVICE_PORT}:${ACCOUNT_SERVICE_PORT}"
    environment:
      - ACCOUNT_DB_HOST=${ACCOUNT_DB_HOST}
      - ACCOUNT_DB_PORT=${ACCOUNT_DB_PORT}
      - ACCOUNT_DB_NAME=${ACCOUNT_DB_NAME}
      - ACCOUNT_DB_USERNAME=${ACCOUNT_DB_USERNAME}
      - ACCOUNT_DB_PASSWORD=${ACCOUNT_DB_PASSWORD}
      - ACCOUNT_SERVICE_PORT=${ACCOUNT_SERVICE_PORT}
      - CONFIG_SERVER_NAME=${CONFIG_SERVER_NAME}
      - CONFIG_SERVER_PORT=${CONFIG_SERVER_PORT}
      - CONSUL_HOST_NAME=${CONSUL_HOST_NAME}
      - KEYCLOAK_HOST_NAME=${KEYCLOAK_HOST_NAME}
    entrypoint: >
      sh -c "
        until curl -f http://keycloak:9092/realms/master; do
          echo 'Waiting for Keycloak to start...';
          sleep 5;
        done &&
        exec java -jar account-service.jar
      "
    depends_on:
      config-server:
        condition: service_healthy
      account-db:
        condition: service_healthy

  account-db:
    image: postgres:15.1-alpine
    container_name: account-db
    environment:
      POSTGRES_DB: ${ACCOUNT_DB_NAME}
      POSTGRES_USER: ${ACCOUNT_DB_USERNAME}
      POSTGRES_PASSWORD: ${ACCOUNT_DB_PASSWORD}
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${ACCOUNT_DB_USERNAME}", "-d", "${ACCOUNT_DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 10

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_PORT}"
    environment:
      - NOTIFICATION_DB_HOST=${NOTIFICATION_DB_HOST}
      - NOTIFICATION_DB_PORT=${NOTIFICATION_DB_PORT}
      - NOTIFICATION_DB_NAME=${NOTIFICATION_DB_NAME}
      - NOTIFICATION_DB_USERNAME=${NOTIFICATION_DB_USERNAME}
      - NOTIFICATION_DB_PASSWORD=${NOTIFICATION_DB_PASSWORD}
      - NOTIFICATION_SERVICE_PORT=${NOTIFICATION_SERVICE_PORT}
      - NOTIFICATION_SERVICE_EMAIL=${NOTIFICATION_SERVICE_EMAIL}
      - NOTIFICATION_SERVICE_EMAIL_PASSWORD=${NOTIFICATION_SERVICE_EMAIL_PASSWORD}
      - CONFIG_SERVER_NAME=${CONFIG_SERVER_NAME}
      - CONFIG_SERVER_PORT=${CONFIG_SERVER_PORT}
      - CONSUL_HOST_NAME=${CONSUL_HOST_NAME}
      - KEYCLOAK_HOST_NAME=${KEYCLOAK_HOST_NAME}
    entrypoint: >
      sh -c "
        until curl -f http://keycloak:9092/realms/master; do
          echo 'Waiting for Keycloak to start...';
          sleep 5;
        done &&
        exec java -jar notification-service.jar
      "
    depends_on:
      config-server:
        condition: service_healthy
      notification-db:
        condition: service_healthy

  notification-db:
    image: postgres:15.1-alpine
    container_name: notification-db
    environment:
      POSTGRES_DB: ${NOTIFICATION_DB_NAME}
      POSTGRES_USER: ${NOTIFICATION_DB_USERNAME}
      POSTGRES_PASSWORD: ${NOTIFICATION_DB_PASSWORD}
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${NOTIFICATION_DB_USERNAME}", "-d", "${NOTIFICATION_DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 10

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    ports:
      - "${CONFIG_SERVER_PORT}:${CONFIG_SERVER_PORT}"
    environment:
      - CONFIG_SERVER_PORT=${CONFIG_SERVER_PORT}
      - CONSUL_HOST_NAME=${CONSUL_HOST_NAME}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9090/actuator/health" ]
      interval: 5s
      timeout: 5s
      retries: 5

  exchange-generator:
    build:
      context: ./exchange-generator
      dockerfile: Dockerfile
    ports:
      - "${EXCHANGE_GENERATOR_SERVER_PORT}:${EXCHANGE_GENERATOR_SERVER_PORT}"
    environment:
      - EXCHANGE_GENERATOR_SERVER_PORT=${EXCHANGE_GENERATOR_SERVER_PORT}
      - CONFIG_SERVER_NAME=${CONFIG_SERVER_NAME}
      - CONFIG_SERVER_PORT=${CONFIG_SERVER_PORT}
      - CONSUL_HOST_NAME=${CONSUL_HOST_NAME}
      - KEYCLOAK_HOST_NAME=${KEYCLOAK_HOST_NAME}
    entrypoint: >
      sh -c "
        until curl -f http://keycloak:9092/realms/master; do
          echo 'Waiting for Keycloak to start...';
          sleep 5;
        done &&
        exec java -jar exchange-generator.jar
      "
    depends_on:
      config-server:
        condition: service_healthy

  exchange-service:
    build:
      context: ./exchange-service
      dockerfile: Dockerfile
    ports:
      - "${EXCHANGE_SERVICE_PORT}:${EXCHANGE_SERVICE_PORT}"
    environment:
      - EXCHANGE_SERVICE_PORT=${EXCHANGE_SERVICE_PORT}
      - CONFIG_SERVER_NAME=${CONFIG_SERVER_NAME}
      - CONFIG_SERVER_PORT=${CONFIG_SERVER_PORT}
      - CONSUL_HOST_NAME=${CONSUL_HOST_NAME}
      - KEYCLOAK_HOST_NAME=${KEYCLOAK_HOST_NAME}
    entrypoint: >
      sh -c "
        until curl -f http://keycloak:9092/realms/master; do
          echo 'Waiting for Keycloak to start...';
          sleep 5;
        done &&
        exec java -jar exchange-service.jar
      "
    depends_on:
      config-server:
        condition: service_healthy

  cash-service:
    build:
      context: ./cash-service
      dockerfile: Dockerfile
    ports:
      - "${CASH_SERVICE_PORT}:${CASH_SERVICE_PORT}"
    environment:
      - ACCOUNT_DB_HOST=${ACCOUNT_DB_HOST}
      - CASH_DB_HOST=${CASH_DB_HOST}
      - CASH_DB_NAME=${CASH_DB_NAME}
      - CASH_DB_USERNAME=${CASH_DB_USERNAME}
      - CASH_DB_PASSWORD=${CASH_DB_PASSWORD}
      - CASH_SERVICE_PORT=${CASH_SERVICE_PORT}
      - CONFIG_SERVER_NAME=${CONFIG_SERVER_NAME}
      - CONFIG_SERVER_PORT=${CONFIG_SERVER_PORT}
      - CONSUL_HOST_NAME=${CONSUL_HOST_NAME}
      - KEYCLOAK_HOST_NAME=${KEYCLOAK_HOST_NAME}
    entrypoint: >
      sh -c "
        until curl -f http://keycloak:9092/realms/master; do
          echo 'Waiting for Keycloak to start...';
          sleep 5;
        done &&
        exec java -jar cash-service.jar
      "
    depends_on:
      config-server:
        condition: service_healthy
      cash-db:
        condition: service_healthy

  cash-db:
    image: postgres:15.1-alpine
    container_name: cash-db
    environment:
      POSTGRES_DB: ${CASH_DB_NAME}
      POSTGRES_USER: ${CASH_DB_USERNAME}
      POSTGRES_PASSWORD: ${CASH_DB_PASSWORD}
    ports:
      - "5435:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${CASH_DB_USERNAME}", "-d", "${CASH_DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 10

  transfer-service:
    build:
      context: ./transfer-service
      dockerfile: Dockerfile
    ports:
      - "${TRANSFER_SERVICE_PORT}:${TRANSFER_SERVICE_PORT}"
    environment:
      - TRANSFER_DB_HOST=${TRANSFER_DB_HOST}
      - TRANSFER_DB_PORT=${TRANSFER_DB_PORT}
      - TRANSFER_DB_NAME=${TRANSFER_DB_NAME}
      - TRANSFER_DB_USERNAME=${TRANSFER_DB_USERNAME}
      - TRANSFER_DB_PASSWORD=${TRANSFER_DB_PASSWORD}
      - CONFIG_SERVER_NAME=${CONFIG_SERVER_NAME}
      - CONFIG_SERVER_PORT=${CONFIG_SERVER_PORT}
      - CONSUL_HOST_NAME=${CONSUL_HOST_NAME}
      - KEYCLOAK_HOST_NAME=${KEYCLOAK_HOST_NAME}
    entrypoint: >
      sh -c "
        until curl -f http://keycloak:9092/realms/master; do
          echo 'Waiting for Keycloak to start...';
          sleep 5;
        done &&
        exec java -jar transfer-service.jar
      "
    depends_on:
      config-server:
        condition: service_healthy
      transfer-db:
        condition: service_healthy

  transfer-db:
    image: postgres:15.1-alpine
    container_name: transfer-db
    environment:
      POSTGRES_DB: ${TRANSFER_DB_NAME}
      POSTGRES_USER: ${TRANSFER_DB_USERNAME}
      POSTGRES_PASSWORD: ${TRANSFER_DB_PASSWORD}
    ports:
      - "5436:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${TRANSFER_DB_USERNAME}", "-d", "${TRANSFER_DB_USERNAME}" ]
      interval: 5s
      timeout: 5s
      retries: 10

  block-service:
    build:
      context: ./block-service
      dockerfile: Dockerfile
    ports:
      - "${BLOCK_SERVICE_PORT}:${BLOCK_SERVICE_PORT}"
    environment:
      - CONFIG_SERVER_NAME=${CONFIG_SERVER_NAME}
      - CONFIG_SERVER_PORT=${CONFIG_SERVER_PORT}
      - CONSUL_HOST_NAME=${CONSUL_HOST_NAME}
      - KEYCLOAK_HOST_NAME=${KEYCLOAK_HOST_NAME}
    entrypoint: >
      sh -c "
        until curl -f http://keycloak:9092/realms/master; do
          echo 'Waiting for Keycloak to start...';
          sleep 5;
        done &&
        exec java -jar block-service.jar
      "
    depends_on:
      config-server:
        condition: service_healthy


  keycloak:
    image: quay.io/keycloak/keycloak:26.1.3
    container_name: keycloak
    ports:
      - "9092:9092"
    environment:
      - KC_HTTP_PORT=9092
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
      - KC_HEALTH_ENABLED=true
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    command: ["start-dev", "--import-realm"]

  consul:
    image: consul:1.1.0
    hostname: localhost
    ports:
      - "8500:8500"
      - "8600:8600"
      - "8600:8600/udp"
    command: agent -dev -client 0.0.0.0 -log-level=INFO

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "1025:1025"   # SMTP-порт
      - "8025:8025"   # Веб-интерфейс

  kafka:
    image: confluentinc/cp-kafka:7.7.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9091:9091"
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 1
      CLUSTER_ID: "kafka-cluster-1"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"

      # Добавим CLIENT в listeners
      KAFKA_LISTENERS: "BROKER://0.0.0.0:9094,CLIENT://0.0.0.0:9091,CONTROLLER://0.0.0.0:9093"

      # Теперь BROKER — для Docker, CLIENT — для внешних клиентов (с хоста)
      KAFKA_ADVERTISED_LISTENERS: "BROKER://kafka:9094,CLIENT://localhost:9091"

      # Соответствие протоколов: BROKER и CLIENT — PLAINTEXT, CONTROLLER — внутренний
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "BROKER:PLAINTEXT,CLIENT:PLAINTEXT,CONTROLLER:PLAINTEXT"

      # Внутри кластера брокеры общаются через BROKER
      KAFKA_INTER_BROKER_LISTENER_NAME: "BROKER"

      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1

    volumes:
      - kafka_data:/var/lib/kafka/data

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "7071:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9094

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE=mem
    restart: unless-stopped
volumes:
  kafka_data:

